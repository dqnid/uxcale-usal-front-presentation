openapi: 3.0.0
info:
  title: API Employees
  description: This API manage the information of the employees within the company.
  version: 1.0.0
  contact:
    name: API employees support
    email: employeessupp@uxcale.com
    url: 'http://localhost:3000/support'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:3000'
    description: employees
tags:
  - name: Employees
    description: Methods related with employees of the company
paths:
  '/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/AcceptLanguageHeader'
      - $ref: '#/components/parameters/XRequestIdHeader'
    get:
      summary: Get Employee Info by User ID
      security:
        - oAuthSample:
            - read_users
      tags:
        - Employees
      operationId: get-users-userId
      description: Retrieve the information of the employee with the matching employee ID.
      parameters:
        - in: path
          name: userId
          required: true
          description: This is the user's Id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok.
          headers:
            X-Request-ID:
              $ref: '#/components/headers/XRequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                data:
                  username: Mariogm
                  firstName: Mario
                  lastName: Gomez
                  lastName2: Martin
                  email: test@gmail.com
                  phone: +034-666666666
                  userStatus: ACTIVE
                  identification:
                    value: 12345678D
                    type: NIF
        '204':
          description: No content.
          headers:
            X-Request-ID:
              $ref: '#/components/headers/XRequestIdHeader'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Update some employee's data
      security:
        - oAuthSample:
            - write_users
        - oAuthSample:
            - read_users
      tags:
        - Employees
      description: Update the information of the employee with the matching employee ID. Can't Update all Information
      operationId: patch-users-userId
      parameters:
        - in: path
          name: userId
          description: this is the User's Id
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        $ref: '#/components/requestBodies/PatchEmployee'
      responses:
        '204':
          description: Not content.
          headers:
            X-Request-ID:
              $ref: '#/components/headers/XRequestIdHeader'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update all Employee's data
      security:
        - oAuthSample:
            - write_users
        - oAuthSample:
            - read_users
      tags:
        - Employees
      operationId: put-users-userId
      description: Update all information of the employee with the matching employee ID.
      parameters:
        - in: path
          name: userId
          description: this is the User's Id
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        $ref: '#/components/requestBodies/PutEmployee'
      responses:
        '204':
          description: No Content.
          headers:
            X-Request-ID:
              $ref: '#/components/headers/XRequestIdHeader'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete a employee
      security:
        - oAuthSample:
            - write_users
      tags:
        - Employees
      operationId: delete-users-userId
      description: here delete totaly a company's employee
      parameters:
        - in: path
          name: userId
          description: this is the User's Id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '204':
          description: No content.
          headers:
            X-Request-ID:
              $ref: '#/components/headers/XRequestIdHeader'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
  /users:
    parameters:
      - $ref: '#/components/parameters/AcceptLanguageHeader'
      - $ref: '#/components/parameters/XRequestIdHeader'
    post:
      summary: Create New User
      security:
        - oAuthSample:
            - write_users
      tags:
        - Employees
      description: This function create a new employee in the company.
      operationId: post-user
      requestBody:
        $ref: '#/components/requestBodies/PostEmployee'
      responses:
        '201':
          description: Created.
          headers:
            X-Request-ID:
                $ref: '#/components/headers/XRequestIdHeader'
              
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: List Employees
      tags:
        - Employees
      parameters:
        - name: username
          description: Field to filter employees by their username
          required: false
          in: query
          schema:
            type: string
            minLength: 1
            maxLength: 20
        - name: email
          description: Field to filter employes by their username
          required: false
          in: query
          schema:
            type: string
            format: email
            minLength: 1
            maxLength: 50
      operationId: list-employee
      description: List all employees who are registered. Filtered by username or email.
      responses:
        '200':
          description: Ok
          headers:
            X-Request-ID:
              $ref: '#/components/headers/XRequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'
              example:
                data:
                  - username: Josegc
                    firstName: Jose
                    lastName: Garcia
                    lastName2: Calvo
                    email: josegc@gamil.com
                    phone: +034-666666666
                    nif: 70907145P
                  - username: Pedrocm
                    firstName: Pedro
                    lastName: Castro
                    lastName2: Martin
                    email: pedrocm@gamil.com
                    phone: +034-666666666
                    nif: 70907145P
                pagination:
                  offset: 10
                  limit: 10
                  pageNumber: 0
                  totalPages: 0
                  totalElements: 120
                  links:
                    self: 'http://localhost:3000/users?limit=10&offset=10'
                    first: 'http://localhost:3000/users?limit=10&offset=0'
                    last: 'http://localhost:3000/users?limit=10&offset=120'
                    prev: 'http://localhost:3000/users?limit=10&offset=10'
                    next: 'http://localhost:3000/users?limit=10&offset=10'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    oAuthSample:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://localhost:3000/oauth/authorize'
          scopes:
            read_users: read employees in your account
            write_users: modify employees in your account
  schemas:
    UserId:
      title: UserId
      type: object
      description: Employee Id
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the given employee.
    User:
      title: User without Id
      type: object
      description: Employee
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        lastName2:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
          pattern: '\+[0-9]{1,3}-[0-9()+\-]{1,30}'
        nif:
          type: string
            
    UserGet:
      title: UserGet
      description: Response structure of employe list information.
      type: object
      properties:
        data:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/User'
    ErrorMessage:
      title: ErrorMessage
      type: object
      description: Object returned when an error happens.
      properties:
        messages:
          type: array
          maxItems: 10
          description: List of error messages.
          items:
            type: object
            description: Information of the error produced.
            properties:
              code:
                type: string
                description: Field which briefly defines the problem.
              message:
                type: string
                description: Message which describes the main issue.
              type:
                type: string
                description: Describes the type of message displayed. CRITICAL- error that prevents the operation of the entire application FATAL- error that prevents the operation of a specific functionality. ERROR- error that does ot affect more features. WARNIG- application works but a warnig has been generated. INFO- operative info message.
                enum:
                  - CRITICAL
                  - FATAL
                  - ERROR
                  - WARNING
                  - INFO
              description:
                type: string
                description: Describes other details of the error.
            required:
              - code
              - message
              - type
  
  responses:
    '400':
      description: Bad Request.
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            messages:
              - code: resourcesBadRequest
                type: ERROR
                message: Bad Request
                description: Wrog selected parameters or functional error has ocurred
    '401':
      description: Incorrect Authorization.
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            messages:
              - code: resourcesIncorrectAuthorization
                type: ERROR
                message: Incorrect Authorization
                description: The employee with given id has not authorization
    '404':
      description: Not Found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            messages:
              - code: resourcesNotFound
                type: ERROR
                message: Resources request were not found
                description: The employee with given id was not found
    '422':
      description: Unprocessable Entity.
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            messages:
              - code: resourcesUnprocessableEntity
                type: ERROR
                message: Unprocessable Entity
                description: semanticamente
    '500':
      description: Internal Server Error.
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            messages:
              - code: resourcesInternalServerError
                type: ERROR
                message: Internal server Error
                description: An error inside the server
  parameters:
    AcceptLanguageHeader:
      name: Accept-Language
      description: ISO code of the language that the client accepts in response from the server.
      in: header
      required: true
      schema:
        type: string
        pattern: '^(\*)|(^[a-z]+(-[A-Z])*(,[a-z]*;(q=[0-9].[0.9])*)*)$'
        minLength: 1
        example: en-EN
    XRequestIdHeader:
      name: X-Request-ID
      description: Request ID.
      in: header
      required: true
      schema:
        type: string
        format: uuid
        minLength: 1
        maxLength: 100
        example: 54b9c11c-9162-45a1-a352-0d95734cd079
  headers:
    XRequestIdHeader:
      description: Request ID.
      schema:
        type: string
        format: uuid
        minLength: 1
        maxLength: 40
        example: 54b9c11c-9162-45a1-a352-0d95734cd079
    Location:
      description: Gives an URL to be redirected.
      required: true
      schema:
        type: string
        minLength: 1
        example: /resourceName/54475
  requestBodies:
    PatchEmployee:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            Update User Name:
              value:
                username: josegc1
            Update Firt Name:
              value:
                firstName: Jose carlos
    PostEmployee:
      required: true
      description: Post the necessary fields for the API to create a new employee.
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/UserId'
            - $ref: '#/components/schemas/User'
          example:
            data:
              id: 2
              username: Josegc
              firstName: Jose
              lastName: Garcia
              lastName2: Calvo
              email: josegc@gamil.com
              phone: +034-666666666
              nif: 70907145P
    PutEmployee:
      required: true
      description: Post the necessary fields for the API to create a new employee.
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/UserId'
            - $ref: '#/components/schemas/User'
          example:
            data:
              id: 2
              username: Josegc
              firstName: Jose
              lastName: Garcia
              lastName2: Calvo
              email: josegc@gamil.com
              phone: +034-666666666
              nif: 70907145P

